version: '0.2'

phases:
  install:
    runtime-versions:
      nodejs: 12
    commands:
      - yum install parted --assumeyes
        # Download a Rasberry Pi image
      - mkdir -p base_image/mount
      - aws s3 cp --quiet s3://raspberry-pi-imagebucket97210811-7l2bygvw8ufl/raspbian_lite_latest base_image/.
      - unzip base_image/raspbian_lite_latest -d base_image
      - RASPBERRY_PI_BASE_IMAGE=`pwd`/`ls base_image/*.img`
      - let RASPBERRY_PI_IMG1_START=`fdisk -l base_image/*.img | grep ".img1" | awk '{print $2}'`*512
      - let RASPBERRY_PI_IMG1_SIZE=`fdisk -l base_image/*.img | grep ".img1" | awk '{print $4}'`*512
      - let RASPBERRY_PI_IMG2_START=`fdisk -l base_image/*.img | grep ".img2" | awk '{print $2}'`*512
      - let RASPBERRY_PI_IMG2_SIZE=`fdisk -l base_image/*.img | grep ".img2" | awk '{print $4}'`*512
  pre_build:
    commands:
        # Modify the CodeBuild environment
      - mknod /dev/loop0 b 7 0
      - mknod /dev/loop1 b 7 1
        # Update the base image and install Node (needed later by the build environment and final image)
      - mount --verbose --options offset=$RASPBERRY_PI_IMG2_START,sizelimit=$RASPBERRY_PI_IMG2_SIZE $RASPBERRY_PI_BASE_IMAGE base_image/mount
      - mount --verbose --options offset=$RASPBERRY_PI_IMG1_START,sizelimit=$RASPBERRY_PI_IMG1_SIZE $RASPBERRY_PI_BASE_IMAGE base_image/mount/boot
      - |
          chroot base_image/mount /bin/sh << "EOF"
          apt-get update
          apt-get install nodejs --assume-yes --quiet
          apt-get upgrade --assume-yes
          apt-get autoremove --assume-yes
          EOF
      - umount --recursive base_image/mount
        # Create a temporary build environment
      - mkdir -p tool_image/mount
      - cp $RASPBERRY_PI_BASE_IMAGE tool_image/image
      - dd if=/dev/zero bs=1M count=1024 >> tool_image/image
      - parted tool_image/image "resizepart 2 -1"
      - mount --verbose --options offset=$RASPBERRY_PI_IMG2_START tool_image/image tool_image/mount
      - resize2fs /dev/loop0
      - mkdir tool_image/mount/munchii_daemon_source
      - cp -r $CODEBUILD_SRC_DIR_DAEMON/* tool_image/mount/munchii_daemon_source/.
        # https://wiki.archlinux.org/index.php/Chroot
      - mount -t proc proc tool_image/mount/proc/
      - mount --rbind /sys tool_image/mount/sys/
      - mount --rbind /dev tool_image/mount/dev/
      - |
          chroot tool_image/mount /bin/sh << "EOF"
          apt-get install debhelper devscripts dh-systemd npm --assume-yes --quiet
          cd munchii_daemon_source
          npm install
          npm run package
          EOF
      - cp tool_image/mount/munchii_daemon_source/dist/munchiid*.deb .
      - umount --recursive --force tool_image/mount
  build:
    commands:
        # Create the final image
      - mkdir -p final_image/mount
      - cp $RASPBERRY_PI_BASE_IMAGE final_image/munchii.img
      - mount --verbose --options offset=$RASPBERRY_PI_IMG2_START,sizelimit=$RASPBERRY_PI_IMG2_SIZE final_image/munchii.img final_image/mount
      - mount --verbose --options offset=$RASPBERRY_PI_IMG1_START,sizelimit=$RASPBERRY_PI_IMG1_SIZE final_image/munchii.img final_image/mount/boot
      - cp munchiid*.deb final_image/mount/.
      # TODO: Don't create images for n99kpnmsftmg4i94fn17ompf78
      - cp -r $CODEBUILD_SRC_DIR_DAEMON/n99kpnmsftmg4i94fn17ompf78/. final_image/mount/etc/munchiid
      - |
          chroot final_image/mount /bin/sh << "EOF"
          apt-get install --reinstall --assume-yes /munchiid*.deb
          rm /munchiid*.deb
          touch /boot/ssh
          wpa_passphrase "Jiuzhaigou" "amazon.com" >> /etc/wpa_supplicant/wpa_supplicant.conf
          EOF
      - umount --recursive final_image/mount
        # Create dist
      - mkdir dist
      - mv final_image/munchii.img dist/$(date --iso-8601=date)-munchii-${CODEBUILD_BUILD_NUMBER}.img

artifacts:
  files:
    - "**/*"
  name: $(date --iso-8601=date)-munchii-${CODEBUILD_BUILD_NUMBER}.zip
  base-directory: dist
